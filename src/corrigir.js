/* ----------------------------------------------------------------------------
 * File:     corrigir.js
 * Authors:  SrAqua
 * ------------------------------------------------------------------------- */

const { guardarPalavra } = require("./gestorPalavras");
const { aplicarLusofonema } = require("./regras");
const { log, warn, error } = require("./debug");


/**
 * @brief Inicia o ciclo de corre√ß√£o e eventual atualiza√ß√£o do ficheiro JSON.
 * @param {readline.Interface} rl Interface readline CLI.
 * @param {string} palavra Palavra em estudo.
 * @param {object} dados Objeto com os campos da palavra a corrigir.
 */
async function corrigirAdicionar(rl, palavra, dados) {
	return new Promise((resolve) => {

		if (!dados) {
			error("Dados enviados est√£o vazios");
			return resolve();
		}

		let word = dados.palavra;
		let ipa = dados.ipa;
		let luso = dados.lusofonema;

		/* --------------------------------------------------------------------
		 * @brief Mostra o estado atual e inicia o ciclo de corre√ß√£o.
		 * ----------------------------------------------------------------- */
		function ciclo() {
			log("\nüõ†Ô∏è  Corre√ß√£o atual:");
			log(`‚Üí Palavra: ${word}`);
			log(`‚Üí IPA: ${ipa}`);
			log(`‚Üí Lusofonema: ${luso}\n`);

			perguntarSeCorrigir();
		}

		/* --------------------------------------------------------------------
		 * @brief Pergunta se o utilizador quer corrigir e apresenta op√ß√µes.
		 * ----------------------------------------------------------------- */
		function perguntarSeCorrigir() {
			rl.question("üîß Queres corrigir este triplo? (s/n/q): ", (res) => {
				const r = res.trim().toLowerCase();

				if (r === "q") {
					warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
					return resolve();
				}
				if (r === "s") {
					log("1 - Corrigir tudo");
					log("2 - Corrigir s√≥ o IPA e reaplicar regras");
					log("3 - Corrigir s√≥ o Lusofonema");
					log("0 - Cancelar corre√ß√£o");
					log("q - Cancelar e voltar ao menu inicial");

					rl.question("‚úèÔ∏è  Escolhe uma op√ß√£o: ", (modo) => {
						switch (modo.trim()) {
							case "1": editarTodosCampos(); break;
							case "2": editarIPA(); break;
							case "3": editarLusofonema(); break;
							case "0": ciclo(); break;
							case "q": 
								warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
								return resolve();
							default:
								error("Op√ß√£o inv√°lida.\n");
								ciclo();
						}
					});
				}
				else if (r === "n") guardarJSONCorrigido();
				else {
					error("Car√°cter inv√°lido.\n");
					perguntarSeCorrigir();
				}
			});
		}

		/* --------------------------------------------------------------------
		 * @brief Permite editar palavra, IPA e Lusofonema manualmente.
		 * ----------------------------------------------------------------- */
		function editarTodosCampos() {
			rl.question(`‚úèÔ∏è  Palavra [${word}]: `, (inPalavra) => {
				if (inPalavra.trim().toLowerCase() === "q") {
					warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
					return resolve();
				}
				word = inPalavra.trim().toLowerCase() || word;

				rl.question(`‚úèÔ∏è  IPA [${ipa}]: `, (inIPA) => {
					if (inIPA.trim().toLowerCase() === "q") {
						warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
						return resolve();
					}
					ipa = inIPA.trim() || ipa;

					rl.question(`‚úèÔ∏è  Lusofonema [${luso}]: `, (inLuso) => {
						if (inLuso.trim().toLowerCase() === "q") {
							warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
							return resolve();
						}
						luso = inLuso.trim() || luso;
						ciclo();
					});
				});
			});
		}

		/* --------------------------------------------------------------------
		 * @brief Permite editar apenas o IPA e reaplica o Lusofonema.
		 * ------------------------------------------------------------------ */
		function editarIPA() {
			rl.question(`‚úèÔ∏è  Novo IPA [${ipa}]: `, (inIPA) => {
				if (inIPA.trim().toLowerCase() === "q") {
					warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
					return resolve();
				}
				ipa = inIPA.trim() || ipa;
				luso = aplicarLusofonema(word, ipa);
				ciclo();
			});
		}

		/* --------------------------------------------------------------------
		 * @brief Permite editar apenas o campo Lusofonema.
		 * ----------------------------------------------------------------- */
		function editarLusofonema() {
			rl.question(`‚úèÔ∏è  Novo Lusofonema [${luso}]: `, (inLuso) => {
				if (inLuso.trim().toLowerCase() === "q") {
					warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
					return resolve();
				}
				dados.lusofonema = inLuso.trim() || luso;
				ciclo();
			});
		}

		/* --------------------------------------------------------------------
		 * @brief Pergunta se deve guardar e atualiza o ficheiro JSON.
		 * ----------------------------------------------------------------- */
		function guardarJSONCorrigido() {
			rl.question("üíæ Guardar os dados corrigidos? (s/n/q): ", (res) => {
				const r = res.trim().toLowerCase();

				if (r === "q") {
					warn("Sa√≠da for√ßada. Opera√ß√£o cancelada.");
					return resolve();
				}

				if (r === "s") {
					dados.palavra = word;
					dados.ipa = ipa;
					dados.lusofonema = luso;

					guardarPalavra(palavra, dados);
					log("‚úÖ Palavra corrigida e guardada com sucesso.");
					return resolve();
				}

				error("Dados n√£o foram guardados.");
				resolve();
			});
		}

		// In√≠cio do ciclo
		ciclo();
	});
}

module.exports = { corrigirAdicionar };
