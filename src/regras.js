/* ----------------------------------------------------------------------------
* File:     regras.js
* Authors:  SrAqua
* ------------------------------------------------------------------------- */

const { debug } = require("./debug");

/**
 * @brief Cada regra corresponde a:
 * - `pattern`: express√£o regular sobre a forma escrita da palavra
 * - `ipaPattern`: som IPA esperado na mesma posi√ß√£o
 * - `replacement`: substitui√ß√£o na ortografia
 * - `advance`: (opcional) n√∫mero extra de avan√ßos a fazer no √≠ndice da palavra
 */
const luzofonemaRules = [

	// ==================== SIBILANTES ====================
	{ pattern: /(?<=[aeiou])s(?=[aeiou])/gi, ipaPattern: "z", replacement: "z" },
	{ pattern: /√ß/gi, ipaPattern: "s", replacement: "s" },
	{ pattern: /ss/gi, ipaPattern: "s", replacement: "s" },
	{ pattern: /c(?=[e,i])/gi, ipaPattern: "s", replacement: "s" },
	{ pattern: /ch/gi, ipaPattern: " É", replacement: "x" },
	{ pattern: /x/gi, ipaPattern: "ks", replacement: "√ß" },
	{ pattern: /(?<=[aeiou√°√©√≠√≥√∫])x(?=[aeiou√°√©√≠√≥√∫])/gi, ipaPattern: "z", replacement: "z" },
	{ pattern: /(?<=[aeiou√°√©√≠√≥√∫])x(?=[aeiou√°√©√≠√≥√∫√£√µ])/gi, ipaPattern: "s", replacement: "s" },
	{ pattern: /ex/gi, ipaPattern: "…êj É", replacement: "eis" },
	
	// ==================== OCLUSIVAS =====================
	{ pattern: /g(?=[eiy√©√≠])/gi, ipaPattern: " í", replacement: "j" },
	{ pattern: /qu(?=[ei])/gi, ipaPattern: "k", replacement: "c" },
	{ pattern: /q(?=u[ao])/gi, ipaPattern: "k", replacement: "c" },
	{ pattern: /k/gi, ipaPattern: "k", replacement: "c" },
	{ pattern: /rr/gi, ipaPattern: " Å",  replacement: "rr", advance: 1 },

	// =================== LETRAS MUDAS ===================
	{ pattern: /(?<=[g])u(?=[e,i])/gi, ipaPattern: "",  replacement: "" },
	{ pattern: /(?<![ln])h/gi, ipaPattern: "",  replacement: "" },

	// ==================== NASALIZA√á√ÉO ====================
	{ pattern: /lh/gi, ipaPattern: " é",  replacement: "lh", advance: 1 },
	{ pattern: /nh/gi, ipaPattern: "…≤",  replacement: "nh", advance: 1 },
	{ pattern: /(?<=[aeiou])m(?=[ pb])/gi, ipaPattern: "n", replacement: "n" },

	// ======================= DITONGOS =======================
	// Ditongos Orais
	{ pattern: /ai/gi,		ipaPattern: "aj", replacement: "ai" },
	{ pattern: /au/gi,		ipaPattern: "aw", replacement: "au" },
	{ pattern: /ei/gi,		ipaPattern: "…êj", replacement: "ei" },
	{ pattern: /(√©u|eu)/gi, ipaPattern: "…õw", replacement: "√©u" },
	{ pattern: /eu/gi,		ipaPattern: "ew", replacement: "eu" },
	{ pattern: /iu/gi,		ipaPattern: "iw", replacement: "iu" },
	{ pattern: /(√≥i|oi)/gi, ipaPattern: "…îj", replacement: "√≥i" },
	{ pattern: /oi/gi,		ipaPattern: "oj", replacement: "oi" },
	{ pattern: /ou/gi,		ipaPattern: "ow", replacement: "ou" },
	{ pattern: /ui/gi,		ipaPattern: "uj", replacement: "ui" },

	// Ditongos Orais Est√°veis
	{ pattern: /ua/gi,		ipaPattern: "w…ê", replacement: "ua" },
	{ pattern: /ue/gi,		ipaPattern: "we", replacement: "ue" },
	{ pattern: /ui/gi,		ipaPattern: "wi", replacement: "ui" },
	{ pattern: /uo/gi,		ipaPattern: "w…î", replacement: "uo" },

	// Ditongos Nasais
	{ pattern: /√£o/gi, ipaPattern: "…êÃÉw", replacement: "√£o" },
	{ pattern: /√£e/gi, ipaPattern: "…êÃÉj", replacement: "√£e" },
	{ pattern: /√µe/gi, ipaPattern: "√µj", replacement: "√µe" },


	// ==================== SONS VOC√ÅLICOS ====================
	// SEMIVOGAIS
	{ pattern: /i/gi, ipaPattern: "j", replacement: "i" },
	{ pattern: /u/gi, ipaPattern: "w", replacement: "u" },

	// VOGAIS
	{ pattern: /[a√°](?![iu])/gi, ipaPattern: "a",  replacement: "√°" },
	{ pattern: /a/gi,    ipaPattern: "…ê",  replacement: "a" },
	{ pattern: /[e√©]/gi, ipaPattern: "…õ",  replacement: "√©" },
	{ pattern: /[e√™]/gi, ipaPattern: "e",  replacement: "√™" },
	{ pattern: /e/gi,    ipaPattern: "…ô",  replacement: "e" },
	{ pattern: /i/gi,    ipaPattern: "i",  replacement: "i" },
	{ pattern: /[o√≥]/gi, ipaPattern: "…î",  replacement: "√≥" },
	{ pattern: /o/gi,    ipaPattern: "o",  replacement: "o" },
	{ pattern: /o/gi,    ipaPattern: "u",  replacement: "u" },
	{ pattern: /u/gi,    ipaPattern: "u",  replacement: "u" },
];


const mapaGrave = {
	a: "√†", √°: "«é",
	e: "√®", √©: "ƒõ",
	i: "√¨", √≠: "«ê",
	o: "√≤", √≥: "«í",
	u: "√π", √∫: "«î",
};

const vogaisAgudas = /[√°√©√≠√≥√∫]/i;
const vogaisCarons = /[«éƒõ«ê«í«î]/i;
const vogaisFlexas = /[√¢√™√¥]/i;
const vogaisTildes = /[√£√µ]/i;

/**
 * Aplica acento t√≥nico grave (ou caron) √† vogal t√≥nica indicada pelo marcador Àà.
 * S√≥ aplica acento se nenhuma vogal j√° estiver acentuada (aguda ou caron).
 */
function aplicarTonicidade(palavra) {
	const chars = palavra.split("");
	const tIndex = chars.indexOf("Àà");
	if (tIndex === -1) return palavra; // sem marcador, retorna como est√°

	// Estat√≠sticas
	let agudos = 0;
	let temTilde = false;
	let temFlexo = false;

	for (const c of chars) {
		if (vogaisAgudas.test(c)) agudos++;
		if (vogaisTildes.test(c)) temTilde = true;
		if (vogaisFlexas.test(c)) temFlexo = true;
	}

	// Procura vogal t√≥nica
	let tonicaIndex = -1;
	for (let i = tIndex + 1; i < chars.length; i++) {
		if ("aeiou√°√©√≠√≥√∫√¢√™√¥√£√µ".includes(chars[i].toLowerCase())) {
			tonicaIndex = i;
			break;
		}
	}
	if (tonicaIndex === -1) return palavra.replace("Àà", ""); // sem vogal depois de Àà

	const letraTonica = chars[tonicaIndex];

	// Caso 1: mistura de acentos (e t√≥nica √© til ou circunflexo) ‚Üí n√£o fazer nada
	if ((temTilde || temFlexo) && (vogaisTildes.test(letraTonica) || vogaisFlexas.test(letraTonica))) {
		return palavra.replace("Àà", "");
	}

	// Caso 2: s√≥ um agudo ‚Üí manter como est√°
	if (agudos === 1 && vogaisAgudas.test(letraTonica)) {
		return palavra.replace("Àà", "");
	}

	// Caso 3: v√°rios agudos ‚Üí transformar agudo t√≥nico em caron
	if (agudos > 1 && vogaisAgudas.test(letraTonica)) {
		chars[tonicaIndex] = mapaGrave[letraTonica] || letraTonica;
		return chars.filter(c => c !== "Àà").join("");
	}

	// Caso 4: sem acento vis√≠vel ‚Üí aplicar acento grave na vogal t√≥nica
	if (agudos === 0 && !temTilde && !temFlexo) {
		chars[tonicaIndex] = mapaGrave[letraTonica] || letraTonica;
	}

	// Remove o marcador Àà e retorna
	return chars.filter(c => c !== "Àà").join("");
}


/**
 * @brief Aplica as regras do Luzofonema √† string fornecida.
 * A substitui√ß√£o √© feita apenas se o caractere da palavra coincidir com o som no IPA.
 *
 * @param {string} palavra - A palavra original.
 * @param {string} ipa - A transcri√ß√£o fon√©tica IPA da palavra.
 * @return {string} Palavra convertida.
 */
function aplicarLuzofonema(palavraOriginal, ipaOriginal) {

	debug(palavraOriginal, ipaOriginal);

	const resultado = [];
	const word = palavraOriginal;
	const wordArray = palavraOriginal.split("");
	const ipa = ipaOriginal.slice(1, -1); // tira barras indicadores de IPA
	const ipaArray = ipa.split("");

	let wIndex = 0;
	let iIndex = 0;

	while (wIndex < wordArray.length && iIndex < ipaArray.length) {

		const letra = wordArray[wIndex] || "";
		const som = ipaArray[iIndex] || "";

		const wordContext = word.slice(Math.max(0, wIndex - 2), wIndex + 3);
		const ipaContext = ipa.slice(Math.max(0, wIndex - 2), wIndex + 3);

		let novaLetra = letra;

		debug(wIndex, letra, wordContext, iIndex, som, ipaContext);

		// Ignorar marcadores ou s√≠mbolos n√£o alfab√©ticos (ex: Àà)
		if (letra.charCodeAt(0) > "Àà".charCodeAt(0)) {
			wIndex++;
			continue;
		}
		if (som.charCodeAt(0) > "Àà".charCodeAt(0)) {
			iIndex++;
			continue;
		}

		// Lidar com acento t√≥nico Àà
		if (som === "Àà") {
			resultado.push("Àà");
			iIndex++;
			continue;
		}

		let regraAplicada = false;

		for (const { pattern, ipaPattern, replacement, advance } of luzofonemaRules) {
			const wordRegex = new RegExp(pattern, "i");
			const ipaRegex = new RegExp(ipaPattern, "i");

			debug(wordRegex, ipaRegex, pattern, ipaPattern, replacement);

			if (!wordContext.match(wordRegex)) continue;
				
			if (ipaPattern && som !== ipaPattern) continue;

			debug("‚úîÔ∏è Regra aplicada:", pattern, ipaPattern, replacement);

			novaLetra = replacement;
			resultado.push(novaLetra);

			const passo = (advance ?? 0) + 1;
			wIndex += passo;
			iIndex += passo;
			regraAplicada = true;
			break;
		}

		if (!regraAplicada) {
			// nenhuma regra aplicada, copia a letra como est√°
			resultado.push(novaLetra);
			wIndex++;
			iIndex++;
		}

		debug("üî° Resultado parcial:", resultado.join(""));
	}

	return aplicarTonicidade(resultado.join(""));
}

module.exports = { aplicarLuzofonema };
