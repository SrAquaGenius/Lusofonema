/* ----------------------------------------------------------------------------
* File:     regras.js
* Authors:  SrAqua
* ------------------------------------------------------------------------- */

const { debug } = require("./debug");
const { aplicarTonicidade } = require('./tonicidade');
const { separarSilabas, marcarHiatosComH } = require('./silabas');

/**
 * @brief Cada regra corresponde a:
 * - `pattern`: express√£o regular sobre a forma escrita da palavra
 * - `ipaPattern`: som IPA esperado na mesma posi√ß√£o
 * - `out`: substitui√ß√£o na ortografia
 * - `advance`: (opcional) n√∫mero extra de avan√ßos a fazer no √≠ndice da palavra
 */
const rules = [ 

	// ========================== SONS CONSOANT√çCOS ===========================

	// ---------------------- Consoantes Oclusivas (C-O) ----------------------
	{ pattern: /p/gi,	ipaPattern: "p", out: "p" },				// Pato
	{ pattern: /b/gi,	ipaPattern: "b", out: "b" },				// Bola
	{ pattern: /t/gi,	ipaPattern: "t", out: "t" },				// Teto
	{ pattern: /d/gi,	ipaPattern: "d", out: "d" },				// Dado
	{ pattern: /k/gi,	ipaPattern: "k", out: "c" },				// Casa
	{ pattern: /qu(?=[ei])/gi, ipaPattern: "k", out: "c" },			// Queijo
	{ pattern: /q(?=u[ao])/gi, ipaPattern: "k", out: "c" },			// Quanto
	{ pattern: /g/gi,	ipaPattern: "g", out: "g" },				// Gato

	// --------------------- Consoantes Fricativas (C-F) ----------------------
	{ pattern: /f/gi,	ipaPattern: "f", out: "f" },				// Faca
	{ pattern: /v/gi,	ipaPattern: "v", out: "v" },				// Vaca
	{ pattern: /s/gi,	ipaPattern: "s", out: "s" },				// Sapo
	{ pattern: /s/gi,	ipaPattern: " É", out: "s" },				// Cesta
	{ pattern: /ss/gi,	ipaPattern: "s", out: "s" },				// Massa
	{ pattern: /c(?=[e,i])/gi, ipaPattern: "s", out: "s" },			// Cinema
	{ pattern: /√ß/gi,	ipaPattern: "s", out: "s" },				// Li√ß√£o
	{ pattern: /(?<=[aeiou√°√©√≠√≥√∫])x(?=[aeiou√°√©√≠√≥√∫√£√µ])/gi,
						ipaPattern: "s", out: "s" },				// M√°ximo
	{ pattern: /z/gi,	ipaPattern: "z", out: "z" },				// Zero
	{ pattern: /(?<=[aeiou])s(?=[aeiou])/gi, 
						ipaPattern: "z", out: "z" },				// Casa
	{ pattern: /(?<=[aeiou√°√©√≠√≥√∫])x(?=[aeiou√°√©√≠√≥√∫])/gi,
						ipaPattern: "z", out: "z" },				// Exame
	{ pattern: /x/gi,	ipaPattern: " É", out: "x" },				// Bruxa
	{ pattern: /ch/gi,	ipaPattern: " É", out: "x" },				// Chave
	{ pattern: /ex/gi, 	ipaPattern: "…êj É", out: "eis" },			// Texto
	{ pattern: / í/gi,	ipaPattern: " í", out: " í" },				// Jogo
	{ pattern: /g(?=[eiy√©√≠])/gi, ipaPattern: " í", out: "j" },		// Gente

	// -------------- Par Consoantal Oclusivo-Fricativo (PC-OF) ---------------
	{ pattern: /x/gi,	ipaPattern: "ks", out: "√ß" },				// Fluxo

	// ----------------------- Consoantes Nasais (C-N) ------------------------
	{ pattern: /m/gi,	ipaPattern: "m", out: "m" },				// M√£o
	{ pattern: /n/gi,	ipaPattern: "n", out: "n" },				// Nuvem
	{ pattern: /nh/gi,	ipaPattern: "…≤", out: "nh", advance: 1 },	// Manh√£
	{ pattern: /(?<=[aeiou])m(?=[ pb])/gi,
						ipaPattern: "n", out: "n" },				// Campo

	// ---------------------- Consoantes Laterais (C-L) -----------------------
	{ pattern: /l/gi,	ipaPattern: "l", out: "l" },				// Lata
	{ pattern: /lh/gi,	ipaPattern: " é",  out: "lh", advance: 1 },	// Milho

	// ---------------------- Consoantes Vibrantes (C-V) ----------------------
	{ pattern: /r/gi,	ipaPattern: "…æ", out: "r" },				// Raro
	{ pattern: /r/gi,	ipaPattern: "…π", out: "r" },				// Prato
	{ pattern: /rr/gi,	ipaPattern: " Å", out: "rr", advance: 1 },	// Raro


	// ============================ SONS VOC√ÅLICOS ============================

	// --------------------------- Semivogais (SV) ----------------------------
	{ pattern: /i/gi,	ipaPattern: "j", out: "i" },				// Pai
	{ pattern: /u/gi,	ipaPattern: "w", out: "u" },				// Quadro

	// -------------------------- Vogais Orais (V-O) --------------------------
	{ pattern: /[a√°](?![iu])/gi, ipaPattern: "a",  out: "√°" },		// P√°
	{ pattern: /a/gi,	ipaPattern: "…ê",  out: "a" },				// Cama
	{ pattern: /[e√©]/gi, ipaPattern: "…õ",  out: "√©" },				// P√©
	{ pattern: /[e√™]/gi, ipaPattern: "e",  out: "√™" },				// Mesa
	{ pattern: /e/gi,	ipaPattern: "…ô",  out: "e" },				// Sede
	{ pattern: /[i√≠]/gi, ipaPattern: "i",  out: "i" },				// Vida
	{ pattern: /[o√≥]/gi, ipaPattern: "…î",  out: "√≥" },				// P√≥
	{ pattern: /o/gi,	ipaPattern: "o",  out: "o" },				// Ovo
	{ pattern: /o/gi,	ipaPattern: "u",  out: "u" },				// Conto
	{ pattern: /[u√∫]/gi, ipaPattern: "u", out: "u" },				// Luz

	// ------------------------- Vogais Nasais (V-N) --------------------------
	{ pattern: /an/gi,	ipaPattern: "…êÃÉ", out: "an" },				// Manta
	{ pattern: /en/gi,	ipaPattern: "·∫Ω", out: "en" },				// Bem
	{ pattern: /in/gi,	ipaPattern: "ƒ©", out: "in" },				// Fim
	{ pattern: /on/gi,	ipaPattern: "√µ", out: "on" },				// Bom
	{ pattern: /un/gi,	ipaPattern: "≈©", out: "un" },				// Um


	// =============================== DITONGOS ===============================

	// ---------------------------- Ditongos Orais ----------------------------
	{ pattern: /ai/gi,		ipaPattern: "aj", out: "ai" },			// Pai
	{ pattern: /au/gi,		ipaPattern: "aw", out: "au" },			// Pau
	{ pattern: /ei/gi,		ipaPattern: "…êj", out: "ei" },			// Sei
	{ pattern: /(√©u|eu)/gi, ipaPattern: "…õw", out: "√©u" },			// C√©u
	{ pattern: /eu/gi,		ipaPattern: "ew", out: "eu" },			// Meu
	{ pattern: /iu/gi,		ipaPattern: "iw", out: "iu" },			// Piu
	{ pattern: /(√≥i|oi)/gi, ipaPattern: "…îj", out: "√≥i" },			// D√≥i
	{ pattern: /oi/gi,		ipaPattern: "oj", out: "oi" },			// Foi
	{ pattern: /ou/gi,		ipaPattern: "ow", out: "ou" },			// Sou
	{ pattern: /ui/gi,		ipaPattern: "uj", out: "ui" },			// Fui

	// ----------------------- Ditongos Orais Est√°veis ------------------------
	{ pattern: /ua/gi,		ipaPattern: "w…ê", out: "ua" },			// Quadro
	{ pattern: /ue/gi,		ipaPattern: "we", out: "ue" },			// Aguentar
	{ pattern: /ui/gi,		ipaPattern: "wi", out: "ui" },			// Arguido
	{ pattern: /uo/gi,		ipaPattern: "w…î", out: "uo" },			// Quota

	// --------------------------- Ditongos Nasais ----------------------------
	{ pattern: /√£o/gi, ipaPattern: "…êÃÉw", out: "√£o" },				// P√£o
	{ pattern: /√£e/gi, ipaPattern: "…êÃÉj", out: "√£e" },				// M√£e
	{ pattern: /√µe/gi, ipaPattern: "√µj", out: "√µe" },				// Vis√µes


	// ============================= LETRAS MUDAS =============================

	{ pattern: /(?<=[g])u(?=[e,i])/gi, ipaPattern: "",  out: "" },	// Guerra
	{ pattern: /(?<![ln])h/gi, ipaPattern: "",  out: "" },			// Hiena
];


/**
 * @brief Aplica as regras do Luzofonema √† string fornecida.
 * A substitui√ß√£o √© feita apenas se o caractere da palavra coincidir com o som no IPA.
 *
 * @param {string} palavra - A palavra original.
 * @param {string} ipa - A transcri√ß√£o fon√©tica IPA da palavra.
 * @return {string} Palavra convertida.
 */
function aplicarLuzofonema(palavraOriginal, ipaOriginal) {

	debug(palavraOriginal, ipaOriginal);

	const resArray = [];
	const word = palavraOriginal;
	const wordArray = palavraOriginal.split("");
	const ipa = ipaOriginal.slice(1, -1).normalize("NFD");

	const segmenter = new Intl.Segmenter('pt', {granularity: 'grapheme'});
	const ipaArray = Array.from(segmenter.segment(ipa), s => s.segment);

	debug(ipaArray);

	let wIndex = 0;
	let iIndex = 0;

	while (wIndex < wordArray.length && iIndex < ipaArray.length) {

		const letra = wordArray[wIndex] || "";
		const som = ipaArray[iIndex] || "";

		const wordContext = word.slice(Math.max(0, wIndex - 2), wIndex + 3);
		const ipaContext = ipa.slice(Math.max(0, iIndex - 2), iIndex + 3);

		let novaLetra = letra;

		debug(wIndex, letra, wordContext, iIndex, som, ipaContext);

		// Ignorar marcadores ou s√≠mbolos n√£o alfab√©ticos (ex: Àà)
		if (letra.charCodeAt(0) > "Àà".charCodeAt(0)) {
			wIndex++;
			continue;
		}
		if (som.charCodeAt(0) > "Àà".charCodeAt(0)) {
			iIndex++;
			continue;
		}

		// Lidar com acento t√≥nico Àà
		if (som === "Àà") {
			resArray.push("Àà");
			iIndex++;
			continue;
		}

		let regraAplicada = false;

		for (const { pattern, ipaPattern, out, advance } of rules) {
			const wordRegex = new RegExp(pattern, "i");
			const ipaRegex = new RegExp(ipaPattern, "i");

			debug("wRegex: ", wordRegex, "iRegex: ", ipaRegex);
			//debug("Rule: ", pattern, ipaPattern, out);

			if (!wordContext.match(wordRegex)) continue;
			
			if (ipaPattern && !ipaRegex.test(ipaContext)) continue;

			if (!(ipaContext.match(ipaRegex)?.includes(som))) continue;

			debug("‚úîÔ∏è Regra aplicada:", pattern, ipaPattern, out);

			novaLetra = out;
			resArray.push(novaLetra);

			const passo = (advance ?? 0) + 1;
			wIndex += passo;
			iIndex++;
			regraAplicada = true;
			break;
		}

		if (!regraAplicada) {
			// nenhuma regra aplicada, copia a letra como est√°
			resArray.push(novaLetra);
			wIndex++;
			iIndex++;
		}

		debug("üî° resArray parcial:", resArray.join(""));
	}

	return aplicarTonicidade(marcarHiatosComH(resArray.join("")));
}

module.exports = { aplicarLuzofonema };
